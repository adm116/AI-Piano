
import os
import collections
import tensorflow
import numpy
from tensorflow.keras import utils
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Activation
from tensorflow.keras.callbacks import ModelCheckpoint
from random import randint
from music21 import converter, instrument, note, chord, stream

LIMIT = 2 # limit number of files read in for now

def getFiles():
    files = []
    for file in os.listdir("data"):
    	if file.split(".")[-1] == 'mid':
    		files.append(file)
    return files

def getNotes(files):
    notes = []
    for i in range(0, LIMIT):
    	file = files[i]
    	midi = converter.parseFile("data/" + file)
    	notes_to_parse = None
    	parts = instrument.partitionByInstrument(midi)
    	if parts: # file has instrument parts
    		notes_to_parse = parts.parts[0].recurse()
    	else: # file has notes in a flat structure
    		notes_to_parse = midi.flat.notes

    	for element in notes_to_parse:
            # single note
    		if isinstance(element, note.Note):
    			curNote = str(element.pitch)
    			notes.append(curNote)
            # chord
    		elif isinstance(element, chord.Chord):
    			curNote = '.'.join(str(n) for n in element.normalOrder)
    			notes.append(curNote)

    return notes

def getNetworkInputOuput(notes):
    sequence_length = 100
    # get all pitch names
    pitchnames = sorted(set(item for item in notes))
    # create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))
    network_input = []
    network_output = []
    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        network_output.append(note_to_int[sequence_out])
    n_patterns = len(network_input)
    # reshape the input into a format compatible with LSTM layers
    network_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    network_input = network_input / float(len(notes))
    network_output = utils.to_categorical(network_output)
    return (network_input, network_output)

def createLSTM(network_input, n_vocab):
    model = Sequential()
    model.add(LSTM(
        256,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    ))
    model.add(Dropout(0.3))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(256))
    model.add(Dense(256))
    model.add(Dropout(0.3))
    model.add(Dense(151))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
    return model

def train(network_input, network_output, n_vocab, model):
    filepath = "weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5"
    checkpoint = ModelCheckpoint(
        filepath, monitor='loss',
        verbose=0,
        save_best_only=True,
        mode='min'
    )
    callbacks_list = [checkpoint]
    model.fit(network_input, network_output, epochs=200, batch_size=64, callbacks=callbacks_list)


def generateOutput(network_input, network_output, n_vocab, model):
    # Load the weights to each node
    model.load_weights('weights.hdf5')

    start = numpy.random.randint(0, len(network_input)-1)
    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
    pattern = network_input[start]

    prediction_output = []
    # generate 500 notes
    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)
        prediction = model.predict(prediction_input, verbose=0)
        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    offset = 0
    output_notes = []
    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += 0.5

    return output_notes

def writeOutput(output_notes):
    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='test_output.mid')


files = getFiles()
notes = getNotes(files)
network_input, network_output = getNetworkInputOuput(notes)
model = createLSTM(network_input, len(notes))
train(network_input, network_output, len(notes), model)
model = createLSTM(network_input, len(notes))
output_notes = generateOutput(network_input, network_output, len(notes), model)
writeOutput(output_notes)
